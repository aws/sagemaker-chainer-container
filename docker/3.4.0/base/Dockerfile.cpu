FROM ubuntu:16.04
# this is MXNet and TF base image, try to keep it

# install python, nginx, BLAS libraries
# OpenMPI. Installs 1.10.x. TODO: install 3.0.0 or 2.1.2 instead?
RUN apt-get update && \
    apt-get -y install build-essential libopencv-dev libopenblas-dev \
    python-dev python3-dev curl nginx openssh-server \
    openmpi-bin libopenmpi-dev

RUN cd /tmp && \
     curl -O https://bootstrap.pypa.io/get-pip.py && \
     python2 get-pip.py && \
     python3 get-pip.py

# https://stackoverflow.com/questions/29274638/opencv-libdc1394-error-failed-to-initialize-libdc1394
RUN ln -s /dev/null /dev/raw1394


# install telegraf, used for metrics and benchmark
RUN cd /tmp && \
    curl -O https://dl.influxdata.com/telegraf/releases/telegraf_1.4.2-1_amd64.deb && \
    dpkg -i telegraf_1.4.2-1_amd64.deb && \
    rm telegraf_1.4.2-1_amd64.deb


# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules
# Force stdin, stdout and stderr to be totally unbuffered. Good for looging
ENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1

# SSH. Partially taken from https://docs.docker.com/engine/examples/running_ssh_service/
RUN mkdir /var/run/sshd
# SSH login fix. Otherwise user is kicked off after login
RUN sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd

# Create SSH key.
# TODO: don't run as root.
RUN mkdir -p /root/.ssh/
RUN ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa
RUN cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys
RUN printf "Host *\n  StrictHostKeyChecking no\n" >> /root/.ssh/config

# MPI Configuration.
RUN mkdir -p /root/.openmpi

# If any training process fails, fail entire job. https://www.open-mpi.org/doc/v3.0/man1/mpirun.1.php#toc23
# TODO: This doesn't actually work as expected. MPI job keeps running even if user module raises an exception.
# RUN echo "orte_abort_on_non_zero_status=1\n" >> /root/.openmpi/mca-params.conf

# Add /mpi_script.sh
# For distributed training: the 'master node' runs mpirun with this script, '/mpi_script.sh'
# This script creates a file '/mpi_is_running' that worker nodes use to determine whether training (started by MPI from
# the master node) is still running. Processes on worker nodes use /mpi_is_running file to determine when to exit.
COPY mpi_script.sh /mpi_script.sh
RUN chmod +x /mpi_script.sh
